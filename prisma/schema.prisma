// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile     @relation(fields: [profileId], references: [id])
  profileId     Int
  Itinerary     Itinerary[]
}

model Profile {
  id          Int         @id @default(autoincrement())
  bio         String
  itineraries Itinerary[]
  comments    Comment[]
  username    String
  User        User[]
}

model Itinerary {
  id         Int       @id @default(autoincrement())
  name       String
  startDate  DateTime
  endDate    DateTime
  tripDays   TripDay[]
  photos     String[]
  comments   Comment[]
  likes      Int
  owner      User      @relation(fields: [ownerId], references: [id])
  ownerId    String
  // coowner       User[]
  visibility Boolean
  Profile    Profile?  @relation(fields: [profileId], references: [id])
  profileId  Int?
}

model TripDay {
  id          Int        @id @default(autoincrement())
  date        DateTime
  activities  Activity[]
  Itinerary   Itinerary? @relation(fields: [itineraryId], references: [id])
  itineraryId Int?
}

model Comment {
  id          Int        @id @default(autoincrement())
  profile     Profile    @relation(fields: [profileId], references: [id])
  text        String
  Itinerary   Itinerary? @relation(fields: [itineraryId], references: [id])
  itineraryId Int?
  profileId   Int
}

model Activity {
  id          Int      @id @default(autoincrement())
  name        String
  startTime   DateTime
  endTime     DateTime
  contactInfo String?
  note        String?
  street      String
  postalCode  String
  city        String
  country     String
  TripDay     TripDay? @relation(fields: [tripDayId], references: [id])
  tripDayId   Int?
}
